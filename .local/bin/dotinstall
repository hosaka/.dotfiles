#!/bin/sh
set -eu

force_install=false

hush() {
  "$@" >/dev/null 2>&1
}

has() {
  hush command -v "$@"
}

say() {
  printf "dotinstall: %s\n" "$1"
}

err() {
  say "$1" >&2
  exit 1
}

need() {
  if ! has "$1"; then
    err "need '$1' (command not found)"
  fi
}

ensure() {
  if ! "$@"; then
    err "command failed: $*"
  fi
}

dot() {
  git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" "$@"
}

usage() {
  cat <<EOF
Dotfiles installer

Install with \`curl https://hosaka.cc/sh/dotinstall | sh\`

Usage: dotinstall [OPTIONS]

Options:
  -f, --force   Ignore existing dotfiles and overwrite them
  -h, --help    Print this message and quit
EOF
}

install() {
  need git

  say "installing to $HOME/.dotfiles"
  git clone --bare https://code.hosaka.cc/hosaka/.dotfiles.git "$HOME/.dotfiles"

  if ! hush dot checkout; then
    if $force_install; then
      hush dot checkout --force
    else
      # files not present will appear as deleted and staged
      # restore them to unstaged and "un-delete" out .gitignore
      dot restore --staged .
      dot restore --worktree .gitignore

      # only modified files will be saved in git stash
      for file in $(dot diff --name-only --diff-filter=M); do
        dot stash push --message "dotinstall: backup $file" "$file"
      done

      dot restore .
    fi
  fi

  say "installed successfully to $HOME/.dotfiles"
}

post_install() {
  case "${SHELL:-}" in
  */bash)
    say "re-run your shell or source .bashrc to activate"
    say ""
    ;;
  *) ;;
  esac
  say "use \`dot\` command (git alias) to manage dotfiles"
  say "use \`dot add -f\` command to add new dotfiles"
  say "use \`dot stash list\` to show files backed up during the install"
  say "use \`dotstrap\` to install common tools, see \`dotstrap --help\` to get started"
}

options=$(getopt --options "f,h" --longoptions "force,help" --name "dotstrap" -- "$@")
exit_code=$?
if [ $exit_code -ne 0 ]; then
  exit $exit_code
fi

eval set -- "$options"

while [ "$1" != "" ]; do
  case "$1" in
  -h | --help)
    usage
    exit 0
    ;;
  -f | --force)
    force_install=true
    shift
    ;;
  --)
    shift
    break
    ;;
  *)
    break
    ;;
  esac
  shift
done

install
post_install
